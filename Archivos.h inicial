//Este es el planteamiento inicial de los archivos .h de cada una de las funciones tomando en cuenta la informacion suministrada dentro del diagrama de clase, con cada una de las funcionalidades especificadas para el desarrollo//

//Archivo.h inicial clase EstacionDeServicio

#ifndef ESTACIONDESERVICIO_H
#define ESTACIONDESERVICIO_H
#include <iostream>
#include "tanque.h"
#include "surtidor.h"

using namespace std;

class EstacionDeServicio
{
private:
    
    string nombreEstacion, gerente, region;
    int codigoIdentificador;
    double longitud, latitud, numSurtidores;
    Tanque tanque;
    Surtidor surtidores[12];    
    
public:
    
    //Constructor
    EstacionDeServicio(const string _nombreEstacion, const string& _gerente, const int _codigoIdentificador, const double _longitud, const double _latitud, Tanque _tanque, Surtidor _surtidor);
    
    //Getters
    string getnombreEstacion();
    int getcodigoIdentificador();
    string getgerente();
    double getlongitud();
    double getlatitud();
    string getregion();
    
    //Setters
    void setnombreEstacion(string *_nombreEstacion);
    void setcodigoIdentificador(int _codigoIdentificador);
    void setgerente(string *_gerente);
    void setlongitud(double _longitud);
    void setlatitud(double _latitud);
    void setregion(string *_region);
    
    //Funciones Adicionales
    void agregarsurtidor(string& codigoSurtidor, int modeloSurtidor, bool estado);
    void eliminarsurtidor(const string& codigoSurtidor);
};

#endif // ESTACIONDESERVICIO_H

//Archivo.h inicial clase RedNacional

#ifndef REDNACIONAL_H
#define REDNACIONAL_H
#include "estaciondeservicio.h"
#include "tanque.h"
#include "surtidor.h"
#include <iostream>

using namespace std;

const int MAX_ESTACIONES = 100;

class RedNacional
{
private:
    EstacionDeServicio estaciones[MAX_ESTACIONES];
    int cantidadEstaciones;
    double precioPorRegion[3][3];
    
public:
    
    //Constructor
    RedNacional(int _cantidadEstaciones, double _precioPorRegion[3][3]);
    
    int getcantidadEstaciones () const;
    double obtenerPrecioPorRegiones (const string& _region, const string& _categoria);
    double establecerPrecio (const string& _region, const string& _categoria, double precio);
    void setcantidadEstaciones (int _cantidadEstaciones);
    void agregarEstacionDeServicio (const string& _nombre, int _codigoIdentificador, const string& _gerente, double _longitud, double _latitud, const string& _region, const Tanque& tanque, const surtidor& _surtidor);
    void eliminarEstacionDeServicio (const string _codigoIdentificador);
    void calcularMontoTransaccion ()
};

#endif // REDNACIONAL_H

//Archivo.h inicial clase Surtidor

#ifndef SURTIDOR_H
#define SURTIDOR_H
#include <iostream>
#include "transaccion.h"

using namespace std;

class Surtidor
{
private:
    string codigoIdentificador;
    int modeloMaquina;
    Transaccion transacciones;
    bool estado;
    
public:
    
    //Constructor
    surtidor(string _codigoIdentificador, int _modeloMaquina, Transaccion _transacciones, bool _estado);
    
    //Getters
    string getcodigoIdentificador();
    int getmodeloMaquina();
    bool getestado();
    
    //Setters
    void setcodigoIdentificador(const string& _codigoIdentificador);
    void setmodeloMaquina(const int& _modeloMaquina);
    void setestado(const bool& _estado);
    
    //Funciones Adicionales
    void activarSurtidor();
    void desactivarSurtidor();
    void consultarTransaccion();
    short int reportarLitroPorCategoria();
    
};

#endif // SURTIDOR_H

//Archivo.h inicial clase Tanque

#ifndef TANQUE_H
#define TANQUE_H

#include <iostream>
using namespace std;
class Tanque
{
private:
    
    EstacionDeServicio EstacionDeServicio;
    string categoria;
    int capacidadInicialRegular;
    int capacidadInicialPremium;
    int capacidadInicialEcoExtra;
    int capacidadActualRegular;
    int capacidadActualPremium;
    int capacidadActualEcoExtra;
    
public:
    
    //Constructor
    Tanque (const string categoria, const int capacidadInicialRegular, const int capacidadInicialPremium, const int capacidadInicialEcoExtra, const int capacidadActualRegular, const int capacidadActualPremium, const int capacidadActualEcoExtra);
    
    //Getters
    string getcategoria();
    int getcapacidadInicialRegular();
    int getcapacidadInicialPremium();
    int getcapacidadInicialEcoExtra();
    int getcapacidadActualRegular();
    int getcapacidadInicialPremium();
    int getcapacidadInicialEcoExtra();
    
    //Setters
    void setcategoria(const string& _categoria);
    void setcapacidadInicialRegular(int _capacidadInicialRegular);
    void setcapacidadInicialPremium(int _capacidadInicialPremium);
    void setcapacidadInicialEcoExtra(int _capacidadInicialEcoExtra);
    void setcapacidadActualRegular(int _capacidadActualRegular);
    void setcapacidadInicialPremium(int _capacidadInicialPremium);
    int setcapacidadInicialEcoExtra(int _capacidadInicialEcoExtra);
    
    //Funciones Adicionales
    void asignarCapacidadAleatoria(int capacidadMinima, int capacidadMaxima, const string& _categoria);
};

#endif // TANQUE_H

//Archivo.h inicial clase Transaccion

#ifndef TRANSACCION_H
#define TRANSACCION_H
#include <iostream>

using namespace std;

class Transaccion
{
private:
    
    string fecha, hora, categoriaCombustible, metodoDePago, documentoUsuario;
    short int cantidadLitros;
    double cantidadDinero;
    
public:
    //Constructor
    transaccion(const string _fecha, const string _hora, const short int _cantidadLitros, const string _categoriaCombustible, const string _metodoDePago, const string _documentoUsuario, const double _cantidadDinero);
    
    //Getters
    string getfecha() const;
    string gethora() const;
    short int getcantidadLitros() const;
    string getcategoriaCombustible() const;
    sting getmetodoDePago() const;
    string getdocumentoUsuario() const;
    double getcantidadDinero() const;
    
    //Setters
    void setfecha(string& _fecha);
    void sethora(string& _hora );
    void setcantidadLitros(short int _cantidadLitros );
    void setcategoriaCombustible(string& _categoriaCombustible);
    void setmetodoDePago(string& metodoDePago);
    void setdocumentoUsuario(string& documentoUsuario);
    void setcantidadDinero(double cantidadDinero);
    
    //Funciones Adicionales
    void mostrarInformacion();
};

#endif // TRANSACCION_H

